<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yjkj.ks_user.mapper.FixRewardMapper">
  <resultMap id="BaseResultMap" type="com.yjkj.ks_user.entity.FixReward">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="one_Mer" jdbcType="BIGINT" property="oneMer" />
    <result column="two_Mer" jdbcType="BIGINT" property="twoMer" />
    <result column="three_Mer" jdbcType="BIGINT" property="threeMer" />
    <result column="remarks_One" jdbcType="BIGINT" property="remarksOne" />
    <result column="remarks_Two" jdbcType="BIGINT" property="remarksTwo" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, one_Mer, two_Mer, three_Mer, remarks_One, remarks_Two
  </sql>
  <select id="selectByExample" parameterType="com.yjkj.ks_user.entity.FixRewardExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from ks_fixed_reward
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from ks_fixed_reward
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from ks_fixed_reward
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.yjkj.ks_user.entity.FixRewardExample">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from ks_fixed_reward
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.yjkj.ks_user.entity.FixReward">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into ks_fixed_reward (id, one_Mer, two_Mer, 
      three_Mer, remarks_One, remarks_Two
      )
    values (#{id,jdbcType=BIGINT}, #{oneMer,jdbcType=BIGINT}, #{twoMer,jdbcType=BIGINT}, 
      #{threeMer,jdbcType=BIGINT}, #{remarksOne,jdbcType=BIGINT}, #{remarksTwo,jdbcType=BIGINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.yjkj.ks_user.entity.FixReward">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into ks_fixed_reward
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="oneMer != null">
        one_Mer,
      </if>
      <if test="twoMer != null">
        two_Mer,
      </if>
      <if test="threeMer != null">
        three_Mer,
      </if>
      <if test="remarksOne != null">
        remarks_One,
      </if>
      <if test="remarksTwo != null">
        remarks_Two,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="oneMer != null">
        #{oneMer,jdbcType=BIGINT},
      </if>
      <if test="twoMer != null">
        #{twoMer,jdbcType=BIGINT},
      </if>
      <if test="threeMer != null">
        #{threeMer,jdbcType=BIGINT},
      </if>
      <if test="remarksOne != null">
        #{remarksOne,jdbcType=BIGINT},
      </if>
      <if test="remarksTwo != null">
        #{remarksTwo,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yjkj.ks_user.entity.FixRewardExample" resultType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from ks_fixed_reward
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update ks_fixed_reward
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.oneMer != null">
        one_Mer = #{record.oneMer,jdbcType=BIGINT},
      </if>
      <if test="record.twoMer != null">
        two_Mer = #{record.twoMer,jdbcType=BIGINT},
      </if>
      <if test="record.threeMer != null">
        three_Mer = #{record.threeMer,jdbcType=BIGINT},
      </if>
      <if test="record.remarksOne != null">
        remarks_One = #{record.remarksOne,jdbcType=BIGINT},
      </if>
      <if test="record.remarksTwo != null">
        remarks_Two = #{record.remarksTwo,jdbcType=BIGINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update ks_fixed_reward
    set id = #{record.id,jdbcType=BIGINT},
      one_Mer = #{record.oneMer,jdbcType=BIGINT},
      two_Mer = #{record.twoMer,jdbcType=BIGINT},
      three_Mer = #{record.threeMer,jdbcType=BIGINT},
      remarks_One = #{record.remarksOne,jdbcType=BIGINT},
      remarks_Two = #{record.remarksTwo,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.yjkj.ks_user.entity.FixReward">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update ks_fixed_reward
    <set>
      <if test="oneMer != null">
        one_Mer = #{oneMer,jdbcType=BIGINT},
      </if>
      <if test="twoMer != null">
        two_Mer = #{twoMer,jdbcType=BIGINT},
      </if>
      <if test="threeMer != null">
        three_Mer = #{threeMer,jdbcType=BIGINT},
      </if>
      <if test="remarksOne != null">
        remarks_One = #{remarksOne,jdbcType=BIGINT},
      </if>
      <if test="remarksTwo != null">
        remarks_Two = #{remarksTwo,jdbcType=BIGINT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yjkj.ks_user.entity.FixReward">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update ks_fixed_reward
    set one_Mer = #{oneMer,jdbcType=BIGINT},
      two_Mer = #{twoMer,jdbcType=BIGINT},
      three_Mer = #{threeMer,jdbcType=BIGINT},
      remarks_One = #{remarksOne,jdbcType=BIGINT},
      remarks_Two = #{remarksTwo,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>